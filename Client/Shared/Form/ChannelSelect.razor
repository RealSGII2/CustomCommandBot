@inject IJSRuntime JavaScript

@using CustomCommandBot.Shared.Utilities

<label class="input">
    <span>
        @Label
    </span>

    <button class="input" @onclick="_open">
        @if (SelectValue != 0)
        {
            <span>
                @Options.First(i => i.Key == SelectValue.ToString()).Value
            </span>
        }
        else
        {
            <span class="muted">
                @Placeholder
            </span>
        }

        <div class="spacer"></div>

        <i data-feather="chevron-down"></i>
    </button>

    <div class="dropdown" id=@guid.ToString()>
        @foreach (var id in Options.Keys.ToList())
        {
            var local = id;

            <button class=@(local == _selectIndex ? "active" : "") @onclick="() => SelectItem(local)">
                @Options.First(i => i.Key == local).Value
            </button>
        }
    </div>
</label>

@code {
    [Parameter] public string Label { get; set; }
    [Parameter] public string Placeholder { get; set; } = "Select...";

    [Parameter] public ulong SelectValue { get; set; }
    [Parameter] public EventCallback<ulong> SelectValueChanged { get; set; }

    [Parameter] public Dictionary<string, string> Options { get; set; } = new();

    private Guid guid = Guid.NewGuid();

    private string _selectIndex = "";

    private async Task SelectItem(string index)
    {
        _selectIndex = index;
        await SelectValueChanged.InvokeAsync(ulong.Parse(_selectIndex));

        await JavaScript.InvokeVoidAsync("removeOpenFromDropdown", guid.ToString());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await JavaScript.InvokeVoidAsync("renderIcons");
    }

    private async Task _open() {
        await JavaScript.InvokeVoidAsync("addOpenToDropdown", guid.ToString());
    }
}
