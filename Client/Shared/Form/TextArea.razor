<label class="input">
    <span>
        @Label
    </span>
    
    @if (!String.IsNullOrEmpty(Limit))
    {
        <textarea maxlength="@Limit" value=@InputValue @oninput="OnChange" placeholder=@Placeholder />

        <p class="lengthIndicator">
            @(InputValue?.Length ?? 0) / @Limit
        </p>
    }
    else
    {
        <textarea value=@InputValue @oninput="OnChange" placeholder=@Placeholder />
    }
</label>
@code {
    [Parameter] public string Label { get; set; }
    [Parameter] public string Placeholder { get; set; } = "";

    [Parameter] public string InputValue { get; set; } = "";
    [Parameter] public EventCallback<string> InputValueChanged { get; set; }

    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    [Parameter] public string Limit { get; set; }

    protected override void OnInitialized()
    {
        Console.WriteLine(Limit);
    }

    private async Task OnChange(ChangeEventArgs e)
    {
        await InputValueChanged.InvokeAsync(e.Value.ToString());
        await ValueChanged.InvokeAsync(e.Value.ToString());
    }
}
