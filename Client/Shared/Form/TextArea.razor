@using System.Linq.Expressions
@using CustomCommandBot.Shared.Utilities

<label class="input @_fieldCssClasses">
    <span>
        @Label
    </span>

    @if (Limit != -1)
    {
        <textarea maxlength=@Limit value=@Value @oninput="HandleInput" placeholder=@Placeholder />

        <p class="lengthIndicator">
            @(Value?.Length ?? 0) / @Limit
        </p>
    }
    else
    {
        <textarea value=@Value @oninput="HandleInput" placeholder=@Placeholder />   
    }
</label>

@code {
    [Parameter] public string Label { get; set; }
    [Parameter] public string Placeholder { get; set; } = "";

    [Parameter] public Expression<Func<string>> ValueExpression { get; set; }

    [Parameter] public int Position { get; set; } = -1;

    [Parameter] public string Value { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    [Parameter] public int Limit { get; set; } = -1;

    [CascadingParameter] public EditContext EditContext { get; set; }

    private FieldIdentifier _fieldIdentifier;
    private string _fieldCssClasses => EditContext?.FieldCssClass(_fieldIdentifier) ?? "";

    private async Task HandleInput(ChangeEventArgs args)
    {
        await ValueChanged.InvokeAsync(args.Value.ToString());
        EditContext?.NotifyFieldChanged(_fieldIdentifier);
    }

    protected override void OnInitialized()
    {
        _fieldIdentifier = FieldIdentifier.Create(ValueExpression);
    }
}